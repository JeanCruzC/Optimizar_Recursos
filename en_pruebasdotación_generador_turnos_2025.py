# -*- coding: utf-8 -*-
"""En_PruebasDotaci√≥n_Generador_Turnos_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DG-RVnqtJmfTJcR9mJndi6NZCk8CQGCh
"""

import os, shutil

BASE = '/content'
EXCLUDES = {'sample_data'}  # carpetas/files a conservar

for name in os.listdir(BASE):
    if name in EXCLUDES:
        continue
    path = os.path.join(BASE, name)
    try:
        if os.path.islink(path) or os.path.isfile(path):
            os.remove(path)
            print(f"Archivo eliminado: {path}")
        elif os.path.isdir(path):
            shutil.rmtree(path)
            print(f"Directorio eliminado: {path}")
    except Exception as e:
        print(f"Error al eliminar {path}: {e}")

print("\n‚úÖ Limpieza de /content completada.")

!pip install pyworkforce

import pandas as pd
import numpy as np
import math
import time
from pyworkforce.scheduling import MinAbsDifference

# üîß PAR√ÅMETROS -------------------------------------------------
MAX_ITER     = 200        # n√∫mero de iteraciones para meta‚Äëheur√≠stica
TIME_SOLVER  = 15.0     # segundos por llamada al solver
SEED_START   = 0         # semilla base para reproducibilidad
ARCH_EXCEL   = "/content/sample_data/Requerido.xlsx"
PERTURB_NOISE= 0.40      # ruido inicial para distribuci√≥n de descansos
MIN_REST_PCT = 0.00      # m√≠nimo porcentaje de d√≠as de descanso
ANNEALING    = True      # usar enfriamiento (annealing)
NOISE_FINAL  = 0.05      # ruido m√≠nimo al final de la meta

# Aleatoriedad reproducible
grng = np.random.default_rng(SEED_START)

dias_semana = ['Lunes','Martes','Mi√©rcoles','Jueves','Viernes','S√°bado','Domingo']

# 1. CARGA DE DEMANDA -------------------------------------------
df_dem = pd.read_excel(ARCH_EXCEL, sheet_name=0)
required_resources = [[] for _ in range(7)]
for _, r in df_dem.iterrows():
    required_resources[int(r['D√≠a'])-1].append(r['Suma de Agentes Requeridos Erlang'])
assert all(len(d)==24 for d in required_resources)

# 2. DEFINICI√ìN DE TURNOS ---------------------------------------
shifts_coverage = {
    # ----------------------------------------------------------
    # TURNOS FULL‚ÄëTIME 8H
    # ----------------------------------------------------------
    "FT_00:00_1":[1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_00:00_2":[1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_00:00_3":[1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_01:00_1":[0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_01:00_2":[0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_01:00_3":[0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_02:00_1":[0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_02:00_2":[0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_02:00_3":[0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_03:00_1":[0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_03:00_2":[0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_03:00_3":[0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    "FT_04:00_1":[0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    "FT_04:00_2":[0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    "FT_04:00_3":[0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    "FT_05:00_1":[0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
    "FT_05:00_2":[0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
    "FT_05:00_3":[0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
    "FT_06:00_1":[0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
    "FT_06:00_2":[0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
    "FT_06:00_3":[0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0],
    "FT_07:00_1":[0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0],
    "FT_07:00_2":[0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0],
    "FT_07:00_3":[0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0],
    "FT_08:00_1":[0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0],
    "FT_08:00_2":[0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0],
    "FT_08:00_3":[0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0],
    "FT_09:00_1":[0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0],
    "FT_09:00_2":[0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0],
    "FT_09:00_3":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0],
    "FT_10:00_1":[0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0],
    "FT_10:00_2":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0],
    "FT_10:00_3":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0],
    "FT_11:00_1":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0],
    "FT_11:00_2":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0],
    "FT_11:00_3":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0],
    "FT_12:00_1":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0],
    "FT_12:00_2":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0],
    "FT_12:00_3":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0],
    "FT_13:00_1":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0],
    "FT_13:00_2":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0],
    "FT_13:00_3":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0],
    "FT_14:00_1":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0],
    "FT_14:00_2":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0],
    "FT_14:00_3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0],
    "FT_15:00_1":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1],
    "FT_15:00_2":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1],
    "FT_15:00_3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1],
    "FT_16:00_1":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1],
    "FT_16:00_2":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1],
    "FT_16:00_3":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1],
    "FT_17:00_1":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1],
    "FT_17:00_2":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1],
    "FT_17:00_3":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1],
    "FT_18:00_1":[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1],
    "FT_18:00_2":[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1],
    "FT_18:00_3":[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
    "FT_19:00_1":[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1],
    "FT_19:00_2":[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
    "FT_19:00_3":[0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
    "FT_20:00_1":[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    "FT_20:00_2":[0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    "FT_20:00_3":[1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    "FT_21:00_1":[0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    "FT_21:00_2":[1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    "FT_21:00_3":[1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    "FT_22:00_1":[1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    "FT_22:00_2":[1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    "FT_22:00_3":[1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    "FT_23:00_1":[1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    "FT_23:00_2":[1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    "FT_23:00_3":[1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],

    # ----------------------------------------------------------
    # TURNOS PART‚ÄëTIME 4H
    # ----------------------------------------------------------
    "00_4":[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "01_4":[0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "02_4":[0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "03_4":[0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "04_4":[0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "05_4":[0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "06_4":[0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "07_4":[0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "08_4":[0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    "09_4":[0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    "10_4":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
    "11_4":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
    "12_4":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
    "13_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0],
    "14_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    "15_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0],
    "16_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0],
    "17_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
    "18_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0],
    "19_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0],
    "20_4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    "21_4":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    "22_4":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    "23_4":[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
}

# 3. LECTURA DE DOTACI√ìN ----------------------------------------
df_staff = pd.read_excel(ARCH_EXCEL, sheet_name=1)
employees = df_staff['Nombre'].astype(str).tolist()
base_shifts = df_staff['Horario'].astype(str).tolist()

# 4. FUNCIONES AUXILIARES --------------------------------------
def adjust_required(dist):
    """Ajusta la demanda diaria seg√∫n porcentaje de descanso"""
    return [[math.ceil(req / (1 - dist[d])) for req in day]
            for d, day in enumerate(required_resources)]

def greedy_day_off_assignment(n, dist):
    """
    Asigna d√≠as de descanso proporcionalmente a la distribuci√≥n dist,
    favoreciendo descansos donde menor demanda.
    """
    counts = np.zeros(7, int)
    quota  = (n * dist).round().astype(int)
    result = []
    for _ in range(n):
        idx = np.argmax(quota - counts)
        result.append(idx)
        counts[idx] += 1
    return result


def mutate_dist(base, it):
    """Genera una distribuci√≥n de descanso mutada con annealing"""
    scale = PERTURB_NOISE
    if ANNEALING:
        frac = it / max(1, MAX_ITER - 1)
        scale = PERTURB_NOISE * (1 - frac) + NOISE_FINAL * frac
    noise = grng.normal(0, scale, 7)
    cand  = np.clip(base * (1 + noise), 1e-9, None)
    cand /= cand.sum()
    # asegurar m√≠nimo descanso
    mask = cand < MIN_REST_PCT
    deficit = (MIN_REST_PCT - cand[mask]).sum()
    cand[mask] = MIN_REST_PCT
    if deficit > 0:
        surplus = ~mask
        cand[surplus] -= deficit / surplus.sum()
        if (cand < 0).any():
            return mutate_dist(base, it)
    return cand


def coverage_pct(sol, dist):
    """Calcula cobertura global comparando plan con demanda"""
    if sol.get('status') not in ('OPTIMAL','FEASIBLE'):
        return 0.0
    offs = greedy_day_off_assignment(len(shifts_coverage), dist)
    day_map = {s: dias_semana[d] for s,d in zip(shifts_coverage, offs)}
    diff, total = 0, sum(map(sum, required_resources))
    for d, day in enumerate(dias_semana):
        for h in range(24):
            req = required_resources[d][h]
            work=0
            for row in sol['resources_shifts']:
                if row['day']==d and shifts_coverage[row['shift']][h] and day_map[row['shift']]!=day:
                    work += row.get('resources',1)
            diff += abs(work - req)
    return (1 - diff/total) * 100


def coverage_manual(plan):
    """Cobertura aproximada para un plan manual de descansos"""
    diff, total = 0, sum(map(sum, required_resources))
    for d in range(7):
        for h in range(24):
            req = required_resources[d][h]
            work=0
            for shift,off in plan:
                if shifts_coverage.get(shift,[0]*24)[h] and off!=d:
                    work += 1
            diff += abs(work - req)
    return (1 - diff/total) * 100

# 5. META‚ÄëHEUR√çSTICA --------------------------------------------
daily_totals = [sum(d) for d in required_resources]
base_rest = np.array([1/max(1,x) for x in daily_totals])
base_rest /= base_rest.sum()

best_cov, best_sol, best_dist = -1, None, None
for it in range(MAX_ITER):
    start=time.time()
    dist = mutate_dist(base_rest, it) if it else base_rest.copy()
    solver = MinAbsDifference(
        num_days=7, periods=24,
        shifts_coverage=shifts_coverage,
        required_resources=adjust_required(dist),
        max_period_concurrency=5000,
        max_shift_concurrency=300,
        max_search_time=TIME_SOLVER,
        num_search_workers=8,
        random_seed=SEED_START+it
    )
    sol=solver.solve()
    cov=coverage_pct(sol,dist)
    print(f"[META {it+1}] Cobertura {cov:.2f}% est={sol.get('status')} t={time.time()-start:.1f}s")
    if cov>best_cov:
        best_cov,best_sol,best_dist = cov, sol, dist.copy()
        print(f"[META] NUEVO MEJOR {cov:.2f}%")

# 6. ASIGNACI√ìN GREEDY DEFINITIVA -------------------------------
days_off = greedy_day_off_assignment(len(employees), best_dist)
plan=[]
for i, emp in enumerate(employees):
    best_cov2, best_pat = -1, None
    for suf in [1,2,3]:
        p=f"{base_shifts[i]}_{suf}"
        cov2=coverage_manual(plan+[(p, days_off[i])])
        if cov2>best_cov2:
            best_cov2,best_pat = cov2,p
    plan.append((best_pat, days_off[i]))
print(f"Plan final, cobertura aproximada: {best_cov:.2f}%")

# 7. EXPORTACI√ìN ------------------------------------------------
import datetime
suf = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

# 7.1 Resultados crudos
if best_sol:
    pd.DataFrame(best_sol['resources_shifts']).to_excel(f"Result_{suf}.xlsx",index=False)

# 7.2 Plan de contrataci√≥n
summary = pd.DataFrame({
    'Nombre':employees,
    'Horario':[p for p,_ in plan],
    'D√≠a Desc.':[dias_semana[off] for _,off in plan]
})
summary['Tipo con.']=summary['Horario'].apply(lambda s:'8h' if s.startswith('FT') else '4h')
summary['Personal a Contratar']=1
plan_con = summary.groupby(['Horario','Tipo con.','D√≠a Desc.'],as_index=False).agg({'Personal a Contratar':'sum'})
plan_con['Refrig']=plan_con['Horario'].apply(lambda s: f"Refrigerio {s.split('_')[-1]}" if s.startswith('FT') else '-')
plan_con.to_excel(f"Plan_Contratacion_{suf}.xlsx",index=False)

# 7.3 Detalle programacion diaria
rows=[]
for i, emp in enumerate(employees):
    pat,off=plan[i]
    for d in range(7):
        if d==off:
            rows.append({'Nombre':emp,'D√≠a':dias_semana[d],'Horario':'Descanso','Refrig':'-'})
        else:
            tag=pat.split('_')[-1]
            rows.append({'Nombre':emp,'D√≠a':dias_semana[d],'Horario':pat,'Refrig':f"Refrigerio {tag}" if pat.startswith('FT') else '-'})
df_det=pd.DataFrame(rows)
df_det.to_excel(f"Detalle_Programacion_{suf}.xlsx",index=False)

# 7.4 Verificaci√≥n de cobertura
cov_rows=[]
for d,dia in enumerate(dias_semana):
    for h in range(24):
        req=required_resources[d][h]
        work=sum(1 for pat,off in plan if off!=d and shifts_coverage.get(pat,[0]*24)[h])
        cov_rows.append({'D√≠a':d+1,'D√≠a Semana':dia,'Hora':f"{h:02}:00",'Requeridos':req,'Asignados':work,'Diferencia':work-req})
pd.DataFrame(cov_rows).to_excel(f"Verificaci√≥n_Cobertura_{suf}.xlsx",index=False)
print("Exportaci√≥n completa.")